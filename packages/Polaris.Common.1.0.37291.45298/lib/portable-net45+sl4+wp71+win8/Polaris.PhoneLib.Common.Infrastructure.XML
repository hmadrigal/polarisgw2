<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Polaris.PhoneLib.Common.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Polaris.PhoneLib.Events.Argument">
            <summary>
            Argument validator class to help validating arguments that are passed into a method.
            <para />
            This class automatically adds thrown exceptions to the log file.
            </summary>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsNotNull(System.String,System.Object)">
            <summary>
            Determines whether the specified argument is not <c>null</c>.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="paramValue">Value of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="paramValue"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Determines whether the specified argument is not <c>null</c> or empty.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="paramValue">Value of the parameter.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="paramValue"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsNotNullOrWhitespace(System.String,System.String)">
            <summary>
            Determines whether the specified argument is not <c>null</c> or a whitespace.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="paramValue">Value of the parameter.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="paramValue"/> is <c>null</c> or a whitespace.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsNotNullOrEmptyArray(System.String,System.Array)">
            <summary>
            Determines whether the specified argument is not <c>null</c> or an empty array (.Length == 0).
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="paramValue">Value of the parameter.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="paramValue"/> is <c>null</c> or an empty array.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsNotOutOfRange(System.String,System.Object,System.Func{System.Object,System.Boolean})">
            <summary>
            Determines whether the specified argument is not out of range.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="paramValue">Value of the parameter.</param>
            <param name="validation">The validation function to call for validation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="paramValue"/> is out of range.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.ImplementsInterface(System.String,System.Object,System.Type)">
            <summary>
            Checks whether the specified <paramref name="instance"/> implements the specified <paramref name="interfaceType"/>.
            </summary>
            <param name="paramName">Name of the param.</param>
            <param name="instance">The instance to check.</param>
            <param name="interfaceType">The type of the interface to check for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="instance"/> does not implement the <paramref name="interfaceType"/>.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.ImplementsInterface(System.String,System.Type,System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> implements the specified <paramref name="interfaceType"/>.
            </summary>
            <param name="paramName">Name of the param.</param>
            <param name="type">The type to check.</param>
            <param name="interfaceType">The type of the interface to check for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="type"/> does not implement the <paramref name="interfaceType"/>.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsOfType(System.String,System.Object,System.Type)">
            <summary>
            Checks whether the specified <paramref name="instance"/> is of the specified <paramref name="requiredType"/>.
            </summary>
            <param name="paramName">Name of the param.</param>
            <param name="instance">The instance to check.</param>
            <param name="requiredType">The type to check for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="requiredType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="instance"/> is not of type <paramref name="requiredType"/>.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsOfType(System.String,System.Type,System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> is of the specified <paramref name="requiredType"/>.
            </summary>
            <param name="paramName">Name of the param.</param>
            <param name="type">The type to check.</param>
            <param name="requiredType">The type to check for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="requiredType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="type"/> is not of type <paramref name="requiredType"/>.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsNotOfType(System.String,System.Object,System.Type)">
            <summary>
            Checks whether the specified <paramref name="instance"/> is not of the specified <paramref name="notRequiredType"/>.
            </summary>
            <param name="paramName">Name of the param.</param>
            <param name="instance">The instance to check.</param>
            <param name="notRequiredType">The type to check for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="notRequiredType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="instance"/> is of type <paramref name="notRequiredType"/>.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsNotOfType(System.String,System.Type,System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> is not of the specified <paramref name="notRequiredType"/>.
            </summary>
            <param name="paramName">Name of the param.</param>
            <param name="type">The type to check.</param>
            <param name="notRequiredType">The type to check for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="notRequiredType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="type"/> is of type <paramref name="notRequiredType"/>.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.IsSupported(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks whether the passed in boolean check is <c>true</c>. If not, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="isSupported">if set to <c>true</c>, the action is supported; otherwise <c>false</c>.</param>
            <param name="errorFormat">The error format.</param>
            <param name="args">The arguments for the string format.</param>
            <exception cref="T:System.NotSupportedException">The <paramref name="isSupported"/> is <c>false</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="errorFormat"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Polaris.PhoneLib.Events.Argument.EnsureValidParamName(System.String)">
            <summary>
            Ensures that the name of the param is valid.
            </summary>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="paramName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Polaris.PhoneLib.Events.EventHandlerExtensions">
            <summary>
            Extensions for event handlers.
            </summary>
        </member>
        <member name="M:Polaris.PhoneLib.Events.EventHandlerExtensions.SafeInvoke(System.EventHandler,System.Object)">
            <summary>
            Invokes the specified <paramref name="handler"/> in a thread-safe manner with <see cref="F:System.EventArgs.Empty"/>
            as parameter for the event args. Where normally one has to write the following code:
            <para/>
            <code>
            <![CDATA[
            var handler = MyEvent;
            if (handler != null)
            {
                handler(this, EventArgs.Empty);
            }
            ]]>
            </code>
            <para/>
            One can now write:
            <para/>
            <code>
            MyEvent.SafeInvoke(this);
            </code>
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <returns><c>true</c> if the event handler was not <c>null</c>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Polaris.PhoneLib.Events.EventHandlerExtensions.SafeInvoke(System.EventHandler{System.EventArgs},System.Object)">
            <summary>
            Invokes the specified <paramref name="handler"/> in a thread-safe manner with <see cref="F:System.EventArgs.Empty"/>
            as parameter for the event args. Where normally one has to write the following code:
            <para/>
            <code>
            <![CDATA[
            var handler = MyEvent;
            if (handler != null)
            {
                handler(this, EventArgs.Empty);
            }
            ]]>
            </code>
            <para/>
            One can now write:
            <para/>
            <code>
            MyEvent.SafeInvoke(this);
            </code>
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <returns><c>true</c> if the event handler was not <c>null</c>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Polaris.PhoneLib.Events.EventHandlerExtensions.SafeInvoke(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Invokes the specified <paramref name="handler"/> in a thread-safe manner with <see cref="F:System.EventArgs.Empty"/>
            as parameter for the event args. Where normally one has to write the following code:
            <para/>
            <code>
            <![CDATA[
            var handler = MyEvent;
            if (handler != null)
            {
                handler(this, EventArgs.Empty);
            }
            ]]>
            </code>
            <para/>
            One can now write:
            <para/>
            <code>
            MyEvent.SafeInvoke(this);
            </code>
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
            <returns><c>true</c> if the event handler was not <c>null</c>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Polaris.PhoneLib.Events.EventHandlerExtensions.SafeInvoke``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invokes the specified <paramref name="handler"/> in a thread-safe manner. Where normally one
            has to write the following code:
            <para/>
            <code>
            <![CDATA[
            var handler = MyEvent;
            if (handler != null)
            {
                handler(this, e);
            }
            ]]>
            </code>
            <para/>
            One can now write:
            <para/>
            <code>
            MyEvent.SafeInvoke(this, e);
            </code>
            </summary>
            <typeparam name="TEventArgs">The type of the <see cref="T:System.EventArgs"/> class.</typeparam>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
            <returns><c>true</c> if the event handler was not <c>null</c>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Polaris.PhoneLib.Events.EventHandlerExtensions.SafeInvoke(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Invokes the specified <paramref name="handler"/> in a thread-safe manner. Where normally one
            has to write the following code:
            <para />
            <code>
            <![CDATA[
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, e, new PropertyChangedEventArgs("propertyName"));
            }
            ]]>
            </code>
            <para />
            One can now write:
            <para />
            <code>
            PropertyChanged.SafeInvoke(this, e, new PropertyChangedEventArgs("propertyName"));
            </code>
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
            <returns><c>true</c> if the event handler was not <c>null</c>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Polaris.PhoneLib.Events.EventHandlerExtensions.SafeInvoke(System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invokes the specified <paramref name="handler"/> in a thread-safe manner. Where normally one
            has to write the following code:
            <para />
            <code>
            <![CDATA[
            var handler = CollectionChanged;
            if (handler != null)
            {
                handler(this, e, new NotifyCollectionChangedEventArgs(...));
            }
            ]]>
            </code>
            <para />
            One can now write:
            <para />
            <code>
            CollectionChanged.SafeInvoke(this, e, new NotifyCollectionChangedEventArgs(...));
            </code>
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
            <returns><c>true</c> if the event handler was not <c>null</c>; otherwise <c>false</c>.</returns>
        </member>
    </members>
</doc>
